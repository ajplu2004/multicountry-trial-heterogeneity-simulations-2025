2+0.5*(900+25/(1/75 + 1/75))
2+0.5*(900+25/(1/75 + 1/31))
3*75/34 + 80*31/34
############bayesian tutorial 6############################
an <- 33/2
bn <- 2+0.5*(900+25/(1/75 + 1/75))
tn <- 34
mn = 3*75/34 + 80*31/34
x <- 78
q <- (x-mn)*sqrt((an+31)/bn)
pt(q, df)
x <- 78
q <- (x-mn)*sqrt((an+31)/bn)
q
pt(q, df)
# Compute the transformation factor
factor <- sqrt((an + 31) / bn)
# Compute the probability
x <- factor * (78 - mn)  # Compute transformed threshold
probability <- pt(x, df = 2 * an)  # Compute probability using Student's t-distribution
print(probability)
# Compute the probability
x <- factor * (81 - mn)  # Compute transformed threshold
probability <- pt(x, df = 2 * an)  # Compute probability using Student's t-distribution
print(probability)
probability <- 1-pt(x, df = 2 * an)  # Compute probability using Student's t-distribution
print(probability)
###### please install the following packages
#install.packages("DoE.base")
#install.packages("FrF2")
library(DoE.base)
library(FrF2)
###### please install the following packages
#install.packages("DoE.base")
#install.packages("FrF2")
library(DoE.base)
library(FrF2)
##2.1
crack.length <- c(6.48, 13.53, 10.71, 15.89, 9.57, 4.02, 8.61, 12.37,
7.88, 15.52, 12.77, 18.24, 10.90, 5.64, 10.30, 14.40,
5.87, 14.00, 11.12, 16.39, 9.34, 3.77, 8.52, 11.89,
8.24, 15.69, 12.57, 18.07, 11.35, 5.43, 10.06, 13.85)
crack <- fac.design(factor.names=c("D","C","B","A"),
nlevels=2, replications=2, randomize=F)
crack <- add.response(crack, response=crack.length)
crack.fit1 <- lm(crack, degree=3)
summary(crack.fit1)
##2.3
diff.c.d <- (1.829063  - 1.387813)*2
anova(crack.fit1)
length(crack.length)
##2.3
diff.c.d <- (1.829063  - 1.387813)*2
var.c.d <- 8*0.065/32
t <- diff.c.d/var.c.d
t
diff.c.d <- (1.829063  - 1.387813)*2
var.c.d <- 8*0.065/32
t <- diff.c.d/var.c.d
var.c.d <- 0.12723600119
diff.c.d <- (1.829063  - 1.387813)*2
var.c.d
var.c.d
var.c.d <- 0.12723600119
diff.c.d <- (1.829063  - 1.387813)*2
var.c.d <- 8*0.065/32
t <- diff.c.d/var.c.d
t
#load in files
source("simulate trial.R")
setwd("C:/Users/ajplu/OneDrive/Desktop/2025_sem1/UROPS/Heteogenety project/simulations/5-30 simulation rewrite/6-11 self defined data")
#load in files
source("simulate trial.R")
#####################run simulations
run_main_simulation <- function(
total_sample_size = 964,
max_sites = 5,
iterations = 10,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
) {
results_list <- list()
for (num_sites in 2:max_sites) {
cat("Running simulation with", num_sites, "sites...\n")
# Run full set of simulations for this site count
trial_results <- simulate_multiple_trials(
num_sites = num_sites,
specification = "random_selection",
iterations = iterations,
total_sample_size = total_sample_size,
site_counts_per_site = "same",
treatment_proportions = treatment_proportion,
generation_method = generation_method
)
# Store as a row with two columns: num_sites, simulation_data
results_list[[num_sites]] <- data.frame(
num_sites = num_sites,
stringsAsFactors = FALSE
)
results_list[[num_sites]]$simulation_data <- list(trial_results)
}
# Combine all rows into a single dataframe
results_df <- do.call(rbind, results_list)
rownames(results_df) <- NULL
return(results_df)
}
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 500,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
results_df <- readRDS("results_df_pw_naive.rds")
saveRDS(results_df, file = "results_df_pw_naive_15_85.rds")
plot_test_power_by_site <- function(results_df) {
# Extract test column names to summarize
test_names <- c(
"z_test",
"naive_t_test",
"fix_effect_model_test",
"mixed_effect_model_test",
"mantel_haenszel_test"
)
# Prepare summary dataframe: one row per (site, test)
summary_df <- lapply(seq_len(nrow(results_df)), function(i) {
site_num <- results_df$num_sites[i]
sim_data <- results_df$simulation_data[[i]]
means <- sapply(test_names, function(test) {
mean(sim_data[[test]], na.rm = TRUE)
})
data.frame(num_sites = site_num, t(means))
}) %>% bind_rows()
# Convert to long format for ggplot
plot_data <- summary_df %>%
pivot_longer(
cols = all_of(test_names),
names_to = "test_type",
values_to = "mean_result"
)
# Plot using ggplot2
ggplot(plot_data, aes(x = num_sites, y = mean_result, color = test_type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(
title = "Mean Power of Each Test by Number of Sites",
x = "Number of Sites",
y = "Proportion of Simulations Passed (Power)",
color = "Test Type"
) +  ylim(0.75, 1)+
theme_minimal() +
theme(text = element_text(size = 12))
}
plot_test_power_by_site <- function(results_df) {
# Extract test column names to summarize
test_names <- c(
"z_test",
"naive_t_test",
"fix_effect_model_test",
"mixed_effect_model_test",
"mantel_haenszel_test"
)
# Prepare summary dataframe: one row per (site, test)
summary_df <- lapply(seq_len(nrow(results_df)), function(i) {
site_num <- results_df$num_sites[i]
sim_data <- results_df$simulation_data[[i]]
means <- sapply(test_names, function(test) {
mean(sim_data[[test]], na.rm = TRUE)
})
data.frame(num_sites = site_num, t(means))
}) %>% bind_rows()
# Convert to long format for ggplot
plot_data <- summary_df %>%
pivot_longer(
cols = all_of(test_names),
names_to = "test_type",
values_to = "mean_result"
)
# Plot using ggplot2
ggplot(plot_data, aes(x = num_sites, y = mean_result, color = test_type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(
title = "Mean Power of Each Test by Number of Sites",
x = "Number of Sites",
y = "Proportion of Simulations Passed (Power)",
color = "Test Type"
) +  ylim(0.75, 1)+
theme_minimal() +
theme(text = element_text(size = 12))
}
plot_test_power_by_site(results_df)
##############plotting#####################
library(ggplot2)
library(dplyr)
library(tidyr)
plot_test_power_by_site <- function(results_df) {
# Extract test column names to summarize
test_names <- c(
"z_test",
"naive_t_test",
"fix_effect_model_test",
"mixed_effect_model_test",
"mantel_haenszel_test"
)
# Prepare summary dataframe: one row per (site, test)
summary_df <- lapply(seq_len(nrow(results_df)), function(i) {
site_num <- results_df$num_sites[i]
sim_data <- results_df$simulation_data[[i]]
means <- sapply(test_names, function(test) {
mean(sim_data[[test]], na.rm = TRUE)
})
data.frame(num_sites = site_num, t(means))
}) %>% bind_rows()
# Convert to long format for ggplot
plot_data <- summary_df %>%
pivot_longer(
cols = all_of(test_names),
names_to = "test_type",
values_to = "mean_result"
)
# Plot using ggplot2
ggplot(plot_data, aes(x = num_sites, y = mean_result, color = test_type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(
title = "Mean Power of Each Test by Number of Sites",
x = "Number of Sites",
y = "Proportion of Simulations Passed (Power)",
color = "Test Type"
) +  ylim(0.75, 1)+
theme_minimal() +
theme(text = element_text(size = 12))
}
plot_test_power_by_site(results_df)
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 10000,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 1000,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
plot_test_power_by_site(results_df)
#load in files
source("simulate trial.R")
#load in files
source("simulate trial.R")
#####################run simulations
run_main_simulation <- function(
total_sample_size = 964,
max_sites = 5,
iterations = 10,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
) {
results_list <- list()
for (num_sites in 2:max_sites) {
cat("Running simulation with", num_sites, "sites...\n")
# Run full set of simulations for this site count
trial_results <- simulate_multiple_trials(
num_sites = num_sites,
specification = "random_selection",
iterations = iterations,
total_sample_size = total_sample_size,
site_counts_per_site = "same",
treatment_proportions = treatment_proportion,
generation_method = generation_method
)
# Store as a row with two columns: num_sites, simulation_data
results_list[[num_sites]] <- data.frame(
num_sites = num_sites,
stringsAsFactors = FALSE
)
results_list[[num_sites]]$simulation_data <- list(trial_results)
}
# Combine all rows into a single dataframe
results_df <- do.call(rbind, results_list)
rownames(results_df) <- NULL
return(results_df)
}
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 1000,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
setwd("C:/Users/ajplu/OneDrive/Desktop/2025_sem1/UROPS/Heteogenety project/github code")
#load in files
source("simulate trial.R")
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 1000,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 1000,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 10,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
###################running and saving the simulation########################
results_df <- run_main_simulation(total_sample_size = 1032,
max_sites = 25,
iterations = 2,
generation_method = "distribution",  # or "bootstrap"
treatment_proportion = 0.5
)
git remote add origin https://github.com/ajplu2004/multicountry-trial-heterogeneity-simulations-2025.git
